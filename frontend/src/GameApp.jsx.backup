import { useState } from "react";

/**
 * Restaurant¬†Royale ‚Äî front‚Äëend prototype (React¬†+¬†Tailwind¬†v4).
 *
 * How to wire it in a fresh Vite project (zero‚Äëconfig Tailwind):
 * -------------------------------------------------------------
 *   # Create project & install deps
 *   npm create vite@latest restaurant-royale -- --template react
 *   cd restaurant-royale && npm i && npm i -D tailwindcss@latest @tailwindcss/postcss @tailwindcss/vite
 *
 *   # Enable the Vite plugin ‚Üí vite.config.js
 *   import tailwindcss from "@tailwindcss/vite";
 *   export default defineConfig({ plugins: [react(), tailwindcss()] });
 *
 *   # Minimal CSS entry (src/index.css)
 *   @import "tailwindcss";
 *
 *   # Use this file
 *   ‚îú‚îÄ src/GameApp.jsx          ‚Üê (this file)
 *   ‚îî‚îÄ src/App.jsx              ‚Üê re‚Äëexports GameApp (see bottom)
 *
 *   npm run dev    # open http://localhost:5173
 * -------------------------------------------------------------
 *
 *  ‚Ä¢ Screens implemented:
 *      ‚ñ∏ Lobby   ‚Äì room & settings
 *      ‚ñ∏ Game    ‚Äì round play (endorse / sabotage)
 *      ‚ñ∏ Trophy  ‚Äì winner splash
 *  ‚Ä¢ All backend hooks are mocked with console.log.
 */

export default function GameApp() {
  const [screen, setScreen] = useState("lobby"); // "lobby" | "game" | "trophy"

  return (
    <>
      {screen === "lobby" && <Lobby onEnterGame={() => setScreen("game")} />}
      {screen === "game" && <Game onFinish={() => setScreen("trophy")} />}
      {screen === "trophy" && <Trophy onRestart={() => setScreen("lobby")} />}
    </>
  );
}

/*******************************
 * 1 ‚ñ∏ LOBBY (room selection)  *
 *******************************/
function Lobby({ onEnterGame }) {
  const rooms = [
    { id: 123, players: 4, capacity: 4 },
    { id: 456, players: 2, capacity: 4 },
  ];
  const [numPlayers, setNumPlayers] = useState(4);
  const [areas, setAreas] = useState({ park: true, train: true, karaoke: true });
  const toggleArea = (k) => setAreas((a) => ({ ...a, [k]: !a[k] }));

  return (
    <div className="flex h-screen bg-orange-900 text-amber-100 font-mono">
      {/* Left panel */}
      <aside className="w-80 p-4 flex flex-col space-y-4">
        <h1 className="text-3xl leading-tight text-amber-200 drop-shadow">
          Restaurant<br />Royale
        </h1>

        {rooms.map((r) => (
          <button
            key={r.id}
            onClick={onEnterGame}
            className="bg-orange-700 rounded p-2 hover:bg-orange-600 active:translate-y-0.5"
          >
            <div className="text-lg">Room #{r.id}</div>
            <div className="text-xs">
              {r.players}/{r.capacity}
            </div>
          </button>
        ))}

        <button
          className="bg-amber-300 text-orange-900 rounded p-2 font-bold hover:bg-amber-400 active:translate-y-0.5"
          onClick={() => console.log("create-room")}
        >
          CREATE NEW ROOM
        </button>

        {/* Player slider */}
        <label className="pt-2">Number of Players ({numPlayers})</label>
        <input
          type="range"
          min="2"
          max="10"
          value={numPlayers}
          onChange={(e) => setNumPlayers(+e.target.value)}
          className="accent-amber-500 w-full"
        />

        {/* Areas */}
        <div className="pt-2">
          <div>Common Areas</div>
          {Object.entries(areas).map(([k, v]) => (
            <label key={k} className="flex items-center space-x-2">
              <input type="checkbox" checked={v} onChange={() => toggleArea(k)} />
              <span className="capitalize">{k === "train" ? "Train Station" : k}</span>
            </label>
          ))}
        </div>
      </aside>

      {/* Placeholder map */}
      <main className="flex-1 bg-green-700 relative">
        <div className="absolute inset-0 flex items-center justify-center opacity-20 text-7xl">
          MAP
        </div>
      </main>
    </div>
  );
}

/********************************
 * 2 ‚ñ∏ GAME (round interaction) *
 ********************************/
function Game({ onFinish }) {
  const [mode, setMode] = useState("endorse"); // "endorse" | "sabotage"
  const [value, setValue] = useState(0);
  const remaining = 10 - value;

  return (
    <div className="flex flex-col h-screen bg-stone-100 font-mono">
      {/* Top banner */}
      <header className="p-2 text-center text-xl">
        ROUND 1/3 | Ranking: Sushi¬†Sprint ‚Ä¢ Roll¬†'n'¬†Go ‚Ä¢ Nigiri¬†Ninjas
      </header>

      {/* Board */}
      <section className="flex-1 flex items-center justify-center relative">
        {/* TODO: Replace with sprite grid */}
        <div className="text-6xl opacity-10">GRID</div>
        {value > 0 && (
          <div className="absolute top-1/3 left-1/2 text-xl select-none">
            ‚ûú {mode === "endorse" ? "+" : "-"}
            {value}
          </div>
        )}
      </section>

      {/* Bottom controls */}
      <footer className="bg-stone-300 p-4 space-y-2">
        <div className="flex items-center justify-between">
          <button
            className={`px-4 py-1 rounded ${mode === "endorse" ? "bg-green-500" : "bg-stone-400"}`}
            onClick={() => setMode("endorse")}
          >
            ENDORSE
          </button>
          <button
            className={`px-4 py-1 rounded ${mode === "sabotage" ? "bg-red-500" : "bg-stone-400"}`}
            onClick={() => setMode("sabotage")}
          >
            SABOTAGE
          </button>
          <span>Remaining: {remaining}¬†pts</span>
        </div>

        <input
          type="range"
          min="0"
          max="10"
          step="1"
          value={value}
          onChange={(e) => setValue(+e.target.value)}
          className="w-full accent-blue-600"
        />

        <div className="flex justify-end space-x-2">
          <button
            className="px-3 py-1 bg-white rounded border"
            onClick={() => setValue(0)}
          >
            RESET
          </button>
          <button
            className="px-4 py-1 bg-blue-600 text-white rounded"
            onClick={() => {
              console.log({ mode, value });
              onFinish();
            }}
          >
            SUBMIT
          </button>
        </div>
      </footer>
    </div>
  );
}

/*******************************
 * 3 ‚ñ∏ TROPHY (end screen)     *
 *******************************/
function Trophy({ onRestart }) {
  return (
    <div className="flex flex-col items-center justify-center h-screen bg-yellow-50">
      <div className="text-8xl select-none">üèÜ</div>
      <h2 className="text-3xl mt-4">Winner: Sushi¬†Sprint</h2>
      <button
        className="mt-8 px-6 py-2 bg-amber-400 rounded hover:bg-amber-500"
        onClick={onRestart}
      >
        PLAY AGAIN
      </button>
    </div>
  );
}

/***********************************
 * Re‚Äëexport helper for Vite entry  *
 ***********************************/
//  In src/App.jsx write just:
//      import GameApp from "./GameApp.jsx";
//      export default GameApp;
